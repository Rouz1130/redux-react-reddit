create-react-app <name of project>
npm install redux, react-redux and redux-thunk,  seamless-immutable
Initialize the Redux store and hook up thunk middleware in index.js
Redux is an implementation of the flux architecture( a pattern for passing data around in a React App)
*Classic Flux: app state is held within stores. Dispatched actions cause this state to change, after which the views listen to these state changes will re-render themselves accordingly.
Store: Holds the global app state.
React Views: Connected React components listen on parts of the store.
Action Handlers: Most business logic and side effects are implemented here.
(store pass 'Props' to the 'View' the view dispatch the 'action' to Action-Handlers then the A-H updates 'State' to store. )
Flux simplifies data flow in a single direction.
Flux key terms: 'Reducers', 'Selectors', 'thunks'.Various names of Redux constructs that implement the different parts of the cycle.
Explanation of these terms and there contribution to the different parts of the cycle.
'Selectors': digest parts of the state to make easier props for the views.
'map state to props': connected components specify what state they want as props.
'thunks': async, dispatch other action sand do side-effects.
'reducers': update state, taking state + action and return new state.

PROJECT DIRECTORY STRUCTURE:
/src/components: 'dumb' React components that have no knowledge of redux
/src/containers: 'smart' React components that are connected to our redux store.
/src/services: Abstraction facades for external API(like backend servers).
/src/store: All Redux-specific code goes here, including all business-logic of our app.

'store' directory is organized by domain , each containing:
/src/store/{domain}/reducers.js: Reducer as a default export with all selectors names as exports.
/src/store/{domain}/action.js: All the domain action handlers (thunks and plain object creators)

A STATE-FRIST APPROACH:
Easiest way to approach this architecture is start with 'state'.
For this example our app 'state'. for this tutorial we have two pages. We will start with the first page.
-First page will have a 'List'(topics) retrieved from the server.
-Also we will need to hold 'ID's' from the 'List'(in our case our list is topics). were allowing user to choose the topics(max of 3 for this tutorial).
-the 'list'(topics) will be hold in order they were selected. (so if user chooses 4 from 'list'(topic)the oldest from list is automatically dropped).

In Redux the 'reducer' is the construct that holds 'state' and updates it.
Our code will be organized by domains, so our natural place for the reducer will be src/store/topcs/reducer.js
boilerplates to create a 'reducer': Immutability of our 'state'(required by redux) we use library called 'seamless-immutable'.

OUR FIRST SCENARIO
After modeling our 'state'. Create first page and display some lists(topics) as soon as they are shown up.
'Smart component' will be connected to our 'reducer' and we place it in src/'containers'/TopicsScreen.js(or list.js or whatever you are creating).
There are some boilerplates to create a connected component.
'Smart components' are not allowed to have any logic except dispatching actions.

in our 'Smart Component' (TopicsScreen.js) we add componentDidMount and dispatch an action that will fetch the topics(or lists or whatever you decide).
*Note to remember all app 'State ' must be contained in the store. (If we ever wanted to implement a login we would to rovide every servbice function with login information as argument and hold the login state in one our 'reducers')


Rule: Smart components should always access state through 'selectors.
'Selectors': one of the most important constructs in Redux. Its a pure function that takes the global state as arguemnt and returns some transformation over it. 'Selectors' are tightly coupled to reducers and located inside of 'reducer.js'.
they allow us to perform a few calculations on teh data before its being consumed by the view.

'Dumb Component' not connected to the store nor connected or aware of redux. Dumb components are contained in components folder, smart components are contained in containers.
-DC recieve data from their paretns through props and may hold local component state. and example is TEXTInput component the caret positon is an excellent example of our local component state that should not find its way into your global app state.
RULE: Minimize view logic in smart components by extracting it into dumb components.


SELECTION ON ONE PAGE THAT REDIRECTS TO ANOTHER PAGE'
As you can see, almost every action we export (to be dispatched by views) is a thunk. TopicsScreen. Smart component(topicsScreen) cannot contain any business logic. we make it 'Thunk'.
so our topisScreen has to handle the action of user clicking a topic. But the actions cannot be handled by our smart component(topicsScreen) we add action to topics action.js
